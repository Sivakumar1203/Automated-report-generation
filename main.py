import os
import pandas as pd
from fpdf import FPDF
from datetime import datetime

# Create sample data if file doesn't exist
file_path = "study_performance.csv"

if not os.path.exists(file_path):
    # Create sample data with generic identifiers
    data = {
        "Name": [f"Student_{i+1}" for i in range(10)],
        "Subject": ["Math", "Science", "English", "Math", "Science", 
                   "English", "Math", "Science", "English", "Math"],
        "Score": [85, 92, 78, 90, 88, 76, 95, 82, 89, 91]
    }
    # Create and save the DataFrame
    sample_df = pd.DataFrame(data)
    sample_df.to_csv(file_path, index=False)
    print(f"Created sample CSV file: {file_path}")

# Load the CSV file
df = pd.read_csv(file_path)

# Validate expected columns
expected_columns = {"Name", "Subject", "Score"}
if not expected_columns.issubset(df.columns):
    raise ValueError(f"CSV file must contain columns: {expected_columns}")

# Summary statistics
average_score = df["Score"].mean()
max_score = df["Score"].max()
min_score = df["Score"].min()
top_performer = df[df["Score"] == max_score]["Name"].values[0]

# Subject-wise average
subject_avg = df.groupby("Subject")["Score"].mean().round(2)

# Initialize PDF
pdf = FPDF()
pdf.add_page()
pdf.set_font("Arial", 'B', 16)
pdf.cell(200, 10, "Study Performance Report", ln=True, align='C')

# Metadata
pdf.set_font("Arial", '', 12)
pdf.cell(200, 10, f"Date: {datetime.now().strftime('%Y-%m-%d')}", ln=True)
pdf.cell(200, 10, "Generated by: Automated Reporting System", ln=True)

pdf.ln(10)

# Overall Stats
pdf.set_font("Arial", 'B', 12)
pdf.cell(200, 10, "Overall Statistics:", ln=True)

pdf.set_font("Arial", '', 11)
pdf.cell(200, 8, f"Average Score: {average_score:.2f}", ln=True)
pdf.cell(200, 8, f"Highest Score: {max_score} (ID: {top_performer})", ln=True)
pdf.cell(200, 8, f"Lowest Score: {min_score}", ln=True)

pdf.ln(5)
pdf.set_font("Arial", 'B', 12)
pdf.cell(200, 10, "Average Score by Subject:", ln=True)

pdf.set_font("Arial", '', 11)
for subject, avg in subject_avg.items():
    pdf.cell(200, 8, f"{subject}: {avg}", ln=True)

pdf.ln(10)

# Detailed Records
pdf.set_font("Arial", 'B', 12)
pdf.cell(200, 10, "Individual Scores:", ln=True)

pdf.set_font("Arial", '', 11)
for index, row in df.iterrows():
    pdf.cell(200, 8, f"{row['Name']} - {row['Subject']}: {row['Score']}", ln=True)

# Save PDF
output_pdf = "study_report.pdf"
pdf.output(output_pdf)

print(f"âœ… PDF report generated: {output_pdf}")
